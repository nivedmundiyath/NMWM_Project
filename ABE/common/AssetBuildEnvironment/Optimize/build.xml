<?xml version="1.0" encoding="UTF-8"?>
<project name="BuildOptimize" default="build">

	<description>webMethods Optimize Analytic Engine - ACDL build file</description>

	<property name="master.lib.dir" value="../master_build/lib" />

	<!-- Include Ant Contrib library tasks into the build script. -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${master.lib.dir}/ant-contrib.jar" />

	<property name="optimize.namespace.postfix" value="Optimize" />

	<property name="optimize.target.namespace" value="http://namespaces.softwareag.com/webMethods/${optimize.namespace.postfix}" />

	<tstamp>
		<format property="build.timestamp" pattern="yyyy-MM-dd'T'HH:mm:ss" />
	</tstamp>

	<target name="clean">
	</target>

	<target name="validate">
		<!-- Fail if the "build.output.dir" property has not been set. -->
		<fail message="Required property &quot;build.output.dir&quot; is not set.">
			<condition>
				<or>
					<not>
						<isset property="build.output.dir" />
					</not>
					<equals arg1="${build.output.dir}" arg2="" />
				</or>
			</condition>
		</fail>
		<!-- Fail if neither of the "build.source.dir" and "build.source.project.dir" properties have been correctly set. -->
		<fail message="Source directory is not set. At least one of the following properties should be set: &quot;build.source.dir&quot; or &quot;build.source.project.dir&quot;">
			<condition>
				<!-- True if both "build.source.dir" and "build.source.project.dir" properties have not been correctly set. -->
				<and>
					<!-- True if the "build.source.dir" property has not been set or equals an empty string. -->
					<or>
						<not>
							<isset property="build.source.dir" />
						</not>
						<equals arg1="${build.source.dir}" arg2="" />
					</or>
					<!-- True if the "build.source.project.dir" property has not been set or equals an empty string. -->
					<or>
						<not>
							<isset property="build.source.project.dir" />
						</not>
						<equals arg1="${build.source.project.dir}" arg2="" />
					</or>
				</and>
			</condition>
		</fail>
	</target>

	<target name="prepare" depends="validate">
		<property name="output.dir" value="${build.output.dir}/${optimize.namespace.postfix}" />
		<!-- Make sure the output directory exists. -->
		<mkdir dir="${output.dir}" />
	</target>

	<target name="build" depends="prepare">
		<echo message="Building Optimize assets." />
		<echo message="Output directory: ${output.dir}." />
		<if>
			<!-- True if the "build.source.project.dir" property has been set and does not equal an empty string. -->
			<and>
				<isset property="build.source.project.dir" />
				<not>
					<equals arg1="${build.source.project.dir}" arg2="" />
				</not>
			</and>
			<then>
				<echo message="Single source directories: ${build.source.project.dir}" />
				<!-- Iterate through the list of project directories and build each project. -->
				<for list="${build.source.project.dir}" delimiter=";" param="project.dir">
					<sequential>
						<echo message="Processing directory: &quot;@{project.dir}&quot;" level="debug" />
						<build.project project.dir="@{project.dir}" />
					</sequential>
				</for>
			</then>
		</if>
		<if>
			<!-- True if the "build.source.dir" property has been set and does not equal an empty string. -->
			<and>
				<isset property="build.source.dir" />
				<not>
					<equals arg1="${build.source.dir}" arg2="" />
				</not>
			</and>
			<then>
				<echo message="Source directories: ${build.source.dir}" />
				<for list="${build.source.dir}" delimiter=";" param="projects.dir">
					<sequential>
						<echo message="Processing parent directory: &quot;@{projects.dir}&quot;" level="debug" />
						<for delimiter=";" param="acdl.file">
							<path>
								<!-- Include only those directories that are located directly under tha main assets directory. -->
								<fileset dir="@{projects.dir}" includes="**/*.acdl" />
							</path>
							<sequential>
								<echo message="ACDL file found: &quot;@{acdl.file}&quot;" level="debug" />
								<var name="project.dir" unset="true" />
								<dirname property="project.dir" file="@{acdl.file}" />
								<echo message="Processing directory: &quot;${project.dir}&quot;" level="debug" />
								<build.project project.dir="${project.dir}" />
							</sequential>
						</for>
					</sequential>
				</for>
			</then>
		</if>
		<echo message="All Optimize assets were built successfully." />
	</target>

	<!-- Make sure the project's directory exists and contains the correct ACDL file. -->
	<macrodef name="check.project">
		<attribute name="project.dir" />
		<sequential>
			<!-- Fail if the project directory does not exist. -->
			<fail message="Project directory &quot;@{project.dir}&quot; does not exist.">
				<condition>
					<not>
						<available file="@{project.dir}" type="dir" />
					</not>
				</condition>
			</fail>
		</sequential>
	</macrodef>

	<macrodef name="build.project">
		<attribute name="project.dir" />
		<sequential>
			<var name="project.name" unset="true" />
			<basename property="project.name" file="@{project.dir}" />

			<var name="project.acdl.name" value="${project.name}.acdl" />
			<var name="project.acdl.file" value="@{project.dir}/${project.acdl.name}" />
			<if>
				<available file="${project.acdl.file}" type="file" />
				<then>
					<!-- Validate the project directory. -->
					<check.project project.dir="@{project.dir}" />

					<!-- Print some debug information with verbose severity. -->
					<echo message="Project name: &quot;${project.name}&quot;" level="verbose" />
					<echo message="Project directory: &quot;@{project.dir}&quot;" level="verbose" />
					<echo message="Project ACDL name: &quot;${project.acdl.name}&quot;" level="verbose" />
					<echo message="Project ACDL file: &quot;${project.acdl.file}&quot;" level="verbose" />
					<echo message="Build version: &quot;${build.version}&quot;" level="verbose" />
					<echo message="Build timestamp: &quot;${build.timestamp}&quot;" level="verbose" />

					<var name="acdl.file.content" unset="true" />
					<loadfile property="acdl.file.content" srcFile="${project.acdl.file}" />

					<var name="acdl.target.namespace" unset="true" />
					<propertyregex property="acdl.target.namespace" input="${acdl.file.content}" regexp="targetNamespace=&quot;(${optimize.target.namespace})&quot;" select="\1" />
					<echo message="Target namespace: ${acdl.target.namespace}" level="debug" />

					<!-- Continue only if this is an Optimize project, i.e. the target namespace of the ACDL equals ${optimize.target.namespace}. -->
					<if>
						<equals arg1="${optimize.target.namespace}" arg2="${acdl.target.namespace}" />
						<then>
							<echo message="Building project &quot;${project.name}&quot; from directory &quot;@{project.dir}&quot;." />

							<!-- Create the binary file. In our case it is a ZIP archive. -->
							<zip destfile="${output.dir}/${project.name}.zip" basedir="@{project.dir}" update="true" excludes="*.acdl" />

							<!--
								Copy the ACDL file of the composite into the build output directory
								right next to the newly created ZIP archive.
							-->
							<copy todir="${output.dir}" overwrite="true" encoding="UTF-8" outputencoding="UTF-8">
								<fileset dir="@{project.dir}" includes="${project.acdl.name}" />
							</copy>

							<var name="output.acdl.file" value="${output.dir}/${project.acdl.name}" />

							<replace file="${output.acdl.file}" encoding="UTF-8">
								<replacefilter token="$${buildVersion}" value="${build.version}" />
								<replacefilter token="$${buildTimestamp}" value="${build.timestamp}" />
							</replace>

							<!-- Validate generated ACDL if validation in switched on. -->
							<if>
								<equals arg1="${optimize.acdl.validation}" arg2="on" />
								<then>
									<schemavalidate file="${output.acdl.file}">
										<schema namespace="http://namespaces.softwareag.com/acdl/1.0" file="${master.lib.dir}/acdl-core.xsd" />
									</schemavalidate>
									<echo message="ACDL &quot;${output.acdl.file}&quot; validated successfully." level="verbose" />
								</then>
								<else>
									<echo message="ACDL validation is switched off." level="verbose" />
								</else>
							</if>

							<echo message="Project &quot;${project.name}&quot; built successfully." />
						</then>
						<else>
							<echo message="&quot;${project.name}&quot; is not an ${optimize.namespace.postfix} project." level="verbose" />
						</else>
					</if>
				</then>
				<else>
					<echo message="&quot;${project.name}&quot; is not a valid ACDL project. It does not contain file &quot;${project.acdl.name}&quot;." level="verbose" />
				</else>
			</if>
		</sequential>
	</macrodef>

</project>