<?xml version="1.0" encoding="UTF-8" ?>
<project name="MWS Components Build" default="build" basedir=".">

    <!--
        configuration properties, values to be supplied by the master build script
    -->
    <!--
    <property name="sag.install.dir" value="" />
    <property name="build.version" value="" />
    <property name="build.output.dir" value="" />
    <property name="build.source.dir" value="" />
    <property name="build.source.project.dir" value="" />
    -->
	<property name="common.lib.dir" value="${sag.install.dir}/common/lib"/>
	<echo>common.lib.dir ${common.lib.dir}</echo>
	
	<condition property="build.type" value="TaskEngine" else="MWS">
       <istrue value="${enable.build.TaskEngine}"/>
    </condition>

    <dirname file="${ant.file}" property="buildfile.dir"/>
    <property file="${buildfile.dir}/build.properties"/>

	<tstamp>
        <format property="TODAY_jars" pattern="dd-MM-yyyy"/>
    </tstamp>

	<path id="commonlib.class.path">
		<fileset dir="${common.lib.dir}/../runtime/bundles">
			<include name="mws-patch/eclipse/plugins/*.jar"/>
			<include name="mws-lib/eclipse/plugins/*.jar"/>
			<include name="mws-main/eclipse/plugins/*.jar"/>
			<include name="mws-csp/eclipse/plugins/*.jar"/>
			<include name="mws-test/eclipse/plugins/*.jar"/>
			<include name="bam-ui/eclipse/plugins/*.jar"/>
			<include name="bam-ccs/eclipse/plugins/*.jar"/>
			<include name="is-shared/eclipse/plugins/*.jar"/>
			<include name="glue/eclipse/plugins/*.jar"/>
			<include name="wss/eclipse/plugins/*.jar"/>
			<include name="ext/eclipse/plugins/*.jar"/>
			<include name="event-routing/eclipse/plugins/*.jar"/>
			<include name="event-routing-shared/eclipse/plugins/*.jar"/>
			<include name="pls-core/eclipse/plugins/*.jar"/>
			<include name="platform/eclipse/plugins/*.jar"/>
			<include name="deployer-acdl-shared/eclipse/plugins/*.jar"/>
			<include name="platform/eclipse/plugins/*.jar"/>
			<include name="tes/eclipse/plugins/*.jar"/>
		</fileset>

		<!-- Remove the common.lib.dir lines to comply with BPMSWEB-2894 -->
		<fileset dir="${common.lib.dir}">
			<include name="*.jar" />
			<include name="ext/*.jar" />
			<include name="glassfish/*.jar" />
			<include name="te/*.jar" /><!-- compiling for Task Web Modeler, IS + TE present -->
			<include name="te/compile/*.jar" /><!-- compiling for Task Web Modeler, IS + TE present -->
			<exclude name="*-components.jar" />
		</fileset>
        <fileset dir="${sag.install.dir}/WS-Stack/lib" includes="*.jar" erroronmissingdir="false"/>
		<fileset dir="${build.output.dir}/AppPlatform" includes="*.jar" erroronmissingdir="false" />
        <fileset dir="${buildfile.dir}/lib" includes="*.jar" erroronmissingdir="false" />
	</path>
	<path id="buildtasks.class.path">
		<!-- if IS + TE present -->
		<fileset dir="${common.lib.dir}/te/compile" erroronmissingdir="false">
			<include name="*.jar" />
		</fileset>
		<!-- if building with ABE -->
		<fileset dir="${buildfile.dir}">
			<include name="lib/*.jar" />
			<include name="lib/updates/*.jar" />
			<include name="../master_build/lib/*.jar" />
		</fileset>
	</path>


    <!-- other properties -->
    <tstamp>
            <format property="component.build.timestamp" pattern="yyMMddHHmmss" />
    </tstamp>
    <tstamp>
            <format property="acdl.build.timestamp" pattern="yyyy-MM-dd'T'HH:mm:ss" />
    </tstamp>


    <!--
        default target. The result is creation of the ACDL/BIN pair and copy the files to the $build.output.dir/MWS
    -->
    <target name="build" depends="prepare" description="Build MWS Component(s) and ACDL">
        <!-- build projects specified in ${build.source.project.dir} -->
        <if>
            <isset property="build.source.project.dir" />
            <then>
                <foreach list="${build.source.project.dir}" param="project.dir" target="build:projectdir" delimiter=";" inheritall="true" />
            </then>
        </if>

        <!-- build projects specified in ${build.source.dir} -->
        <if>
            <isset property="build.source.dir" />
            <then>
                <foreach list="${build.source.dir}" param="source.dir" target="build:sourcedir" delimiter=";" inheritall="true" />
            </then>
        </if>
    </target>

    <!--
        deletes all generated artifacts from the $build.source.dir. Does not delete the files from the $build.output.dir.
    -->
    <target name="clean" depends="prepare-clean" description="Deletes all generated artifacts">
        <!-- build projects specified in ${build.source.project.dir} -->
        <foreach list="${build.source.project.dir}" param="project.dir" target="clean:projectdir" delimiter=";" inheritall="true" />

        <!-- build projects specified in ${build.source.dir} -->
        <foreach list="${build.source.dir}" param="source.dir" target="clean:sourcedir" delimiter=";" inheritall="true" />
    </target>

    <target name="prepare" depends="prepare-clean">

        <fail unless="sag.install.dir" message="Required property 'sag.install.dir' is not set" />
        <fail unless="build.version" message="Required property 'build.version' is not set" />
        <fail unless="build.output.dir" message="Required property 'build.output.dir' is not set" />

        <mkdir dir="${build.output.dir}/${build.type}"/>

        <taskdef classname="org.apache.jasper.JspC" name="jasper2">
            <classpath refid="buildtasks.class.path"/>
            <classpath refid="commonlib.class.path"/>
        </taskdef>
        <taskdef classname="com.webmethods.rtl.script.JspC" name="jspc2">
            <classpath refid="buildtasks.class.path"/>
            <classpath refid="commonlib.class.path"/>
        </taskdef>

        <taskdef name="generateAcdl" classname="com.webmethods.portal.build.GenerateAcdlDescriptorInfo">
            <classpath refid="buildtasks.class.path"/>
            <classpath refid="commonlib.class.path"/>
        </taskdef>

        <taskdef name="generateDescriptorResourceBundle" classname="com.webmethods.portal.build.GeneratePortletDescriptorBundle">
            <classpath refid="buildtasks.class.path"/>
            <classpath refid="commonlib.class.path"/>
        </taskdef>

		<taskdef name="generateOsgiManifest" classname="com.webmethods.portal.build.GenerateOsgiManifest">
			<classpath refid="buildtasks.class.path"/>
			<classpath refid="commonlib.class.path"/>
		</taskdef>

        <!-- compiler options -->
        <property name="build.compiler" value="modern"/>
        <property name="build.fork" value="false"/>
        <property name="build.debug" value="on"/>
        <property name="build.deprecation" value="on"/>
        <property name="build.optimize" value="off"/>
        <property name="build.nowarn" value="on"/>
        <property name="build.listfiles" value="no"/>
        <property name="build.pages" value="true"/>
        <property name="build.failonerror" value="true"/>
        <property name="build.failonerror.jsp" value="true"/>
		<!-- MWS-13528 use parameter for java source file encoding -->
		<property name="mws.build.encoding" value="UTF-8" />

        <!-- Read mf entries -->
        <loadmf jar="${common.lib.dir}/wm-caf-server.jar" prefix="mws."/>

		<!-- added for MWS-21448  -->	
		<property name="mws.version" value="${mws.Implementation-Version}" />
        <!-- needed to pre-compile nbsp and jsp -->
        <property name="web.root" value="${buildfile.dir}/PreCompileWebContent" />

    </target>

    <!--
    Loads entries from a manifest file.
    @jar     The jar from where to read
    @prefix  A prefix to prepend
    -->
    <macrodef name="loadmf">
        <attribute name="jar"/>
        <attribute name="prefix" default=""/>
        <sequential>
            <loadproperties>
                <!-- Load the manifest entries -->
                <zipentry zipfile="@{jar}" name="META-INF/MANIFEST.MF"/>
                <!-- Add the prefix -->
                <filterchain>
                    <prefixlines prefix="@{prefix}"/>
                </filterchain>
            </loadproperties>
        </sequential>
    </macrodef>

    <target name="prepare-clean" >
        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath refid="buildtasks.class.path"/>
        </taskdef>

        <taskdef name="componentInfo" classname="com.webmethods.portal.build.ComputeComponentProperties">
            <classpath refid="buildtasks.class.path"/>
        </taskdef>
        <taskdef name="foreachComponent" classname="com.webmethods.portal.build.ForEachComponent">
            <classpath refid="buildtasks.class.path"/>
			<classpath refid="commonlib.class.path" />
        </taskdef>
        <taskdef name="forComponent" classname="com.webmethods.portal.build.ForComponent">
            <classpath refid="buildtasks.class.path"/>
        </taskdef>
    </target>

    <target name="compile" if="src.present">
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${component.home}/WEB-INF/lib"/>
        <javac
            includeAntRuntime="false"
            encoding="${mws.build.encoding}"
            fork="${build.fork}"
            failonerror="${build.failonerror}"
            srcdir="${component.home}/src"
            destdir="${build.classes.dir}"
            debug="${build.debug}"
            deprecation="${build.deprecation}"
            optimize="${build.optimize}"
            nowarn="${build.nowarn}"
            listfiles="${build.listfiles}">
            <classpath>
                <path refid="component.class.path"/>
                <dirset id="shared.components.dir" dir="${shared.components.home}" includes="${shared.classes.dir}" erroronmissingdir="false" />
                <pathelement location="${shared.classes.dir}"/>
                <fileset dir="${component.home}/WEB-INF/lib">
                    <exclude name="${component.name}.jar"/>
                </fileset>
				<fileset dir="${component.home}/lib-compile" includes="**/*.jar" erroronmissingdir="false"/>
            </classpath>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>

        <!-- copy any resources from the src folder to the classes folder -->
        <copy todir="${build.classes.dir}">
            <fileset dir="${component.home}/src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>

        <jar jarfile="${component.home}/WEB-INF/lib/${component.name}.jar" basedir="${build.classes.dir}" compress="true">
            <manifest>
                <section name="webMethods">
                    <attribute name="Specification-Title" value="webMethods Portal"/>
                    <attribute name="Specification-Vendor" value="webMethods"/>
                    <attribute name="Implementation-Title" value="webMethods Portal Component (${component.name})"/>
                    <attribute name="Implementation-Version" value="${mws.Implementation-Version}"/>
                    <attribute name="Implementation-Vendor" value="webMethods, Inc."/>
                    <attribute name="BuildTimestamp" value="${component.build.timestamp}" />
                    <attribute name="BuildVersion" value="${build.version}" />
                    <attribute name="webM-buildNumber" value="${build.number}"/>
                    <attribute name="webM-buildDate" value="${TODAY_jars}"/>
                </section>
            </manifest>
        </jar>
    </target>

    <target name="jspc-internal" if="precompile.ui" description="jsp parsing using internal tool">
        <jspc2
            failonerror="${build.failonerror.jsp}"
            webroot="${web.root}"
            uriroot="${uri.root}"
            package="${jsp.package}"
            outputDir="${component.home}/WEB-INF/classes"
            />
    </target>

    <target name="compileJsp" if="do.compile.jsp" description="compiles parsed jsp java files">
        <mkdir dir="${component.home}/WEB-INF/classes"/>
        <path id="compile.jsp.class.path">
            <pathelement location="${build.classes.dir}"/>
            <path refid="component.class.path"/>
            <dirset id="shared.components.dir" dir="${shared.components.home}" includes="${shared.classes.dir}" erroronmissingdir="false"/>
            <pathelement location="${shared.classes.dir}"/>
        </path>
        <javac
            includeAntRuntime="false" encoding="${mws.build.encoding}"
            fork="${build.fork}"
            destdir="${component.home}/WEB-INF/classes"
            debug="${build.debug}" deprecation="${build.deprecation}" optimize="${build.optimize}" nowarn="${build.nowarn}" listfiles="${build.listfiles}"
            failonerror="${build.failonerror.jsp}"
            srcdir="${component.home}/WEB-INF/classes">
            <include name="**"/>
            <exclude name="tags/**"/>
            <classpath refid="compile.jsp.class.path"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>

    <target name="generateDescriptorResourceBundle" unless="descriptor.bundle.uptodate">
        <generateDescriptorResourceBundle
            portletXml="${component.home}/WEB-INF/portlet.xml"
            wmPortletXml="${component.home}/WEB-INF/wm-portlet.xml"
            outDir="${component.home}/src"
        />
        <property name="src.present" value="true"/>
    </target>


    <target name="clean-common">
        <delete dir="${component.home}/classes" failonerror="false"/>
        <delete dir="${component.home}/WEB-INF/classes" failonerror="false"/>
        <delete dir="${component.home}/WebContent/WEB-INF/classes" failonerror="false"/>
        <delete file="${component.home}/${component.file}" failonerror="false"/>
        <delete file="${component.home}/${component.name}.acdl" failonerror="false"/>
        <delete file="${component.home}/../${component.file}" failonerror="false"/>
        <delete file="${component.home}/WEB-INF/lib/${component.name}.jar" failonerror="false"/>
	<delete file="${component.home}/WebContent/WEB-INF/lib/${component.name}.jar" failonerror="false"/>
        <delete failonerror="false" >
            <fileset dir="${component.home}" includes="*.log buildVersion.xml"/>
        </delete>
    </target>

    <target name="clean:projectdir">
		<echo message="Cleaning Project from: ${project.dir}" />

        <forComponent target="clean-common" targetpertype="false" componentHome="${project.dir}"/>
    </target>

    <target name="clean:sourcedir">
        <echo>Cleaning ALL COMPONENTS IN: ${source.dir}...</echo>
        <foreachComponent target="clean-common" targetpertype="false" root="${source.dir}" componentsHome="${source.dir}" enforceStrictFolderStructure="true"/>
    </target>


    <target name="build:projectdir">
		<echo message="Building Project from: ${project.dir}" />

        <forComponent target="make" targetpertype="true" componentHome="${project.dir}"/>

    </target>

    <target name="build:sourcedir">
        <echo>Building ALL COMPONENTS IN: ${source.dir}...</echo>
        <foreachComponent target="make" targetpertype="true" root="${source.dir}" componentsHome="${source.dir}" enforceStrictFolderStructure="true"/>
    </target>

    <target name="make-cdp">
        <echo>Building COMPONENT: ${component.name}...</echo>

        <available file="${component.home}/src" property="src.present"/>
        <property name="build.classes.dir" value="${component.home}/classes"/>
        <property name="shared.classes.dir" value="${shared.components}"/>

        <path id="component.class.path">
            <path refid="commonlib.class.path"/>
            <fileset dir="${component.home}" includes="**/*.jar"/>
        </path>
        <antcall target="compile" inheritall="true" inheritrefs="true"/>

		<echo>Generating component ACDL...</echo>
		<generateAcdl buildTimestamp="${acdl.build.timestamp}" runtimeVersion="${mws.Implementation-Version}" />

        <!-- generate the manifest for osgi -->
        <tempfile property="osgi.manifest.temp.dir" destDir="${java.io.tmpdir}" prefix="${component.file}" deleteonexit="true" />
        <generateOsgiManifest componentWebContent="${component.home}" 
                        outputDir="${osgi.manifest.temp.dir}"
                        projectType="cdp"/>    

        <jar jarfile="${build.output.dir}/MWS/${component.file}" basedir="${component.home}" compress="true" excludes="classes/**"
		manifest="${osgi.manifest.temp.dir}/META-INF/MANIFEST.MF">
            <exclude name="${component.file}"/>
            <exclude name="build.properties"/>
            <exclude name="src/**" unless="component.include.src"/>
            <exclude name=".project"/>
            <exclude name=".classpath"/>
            <exclude name=".settings/**"/>    
            <exclude name="update.cnf"/>                
            <exclude name="MANIFEST.MF"/>                
            <fileset dir="${osgi.manifest.temp.dir}" excludes="META-INF/MANIFEST.MF" />
			<exclude name="lib-compile/**"/>


            <manifest>
            	<attribute name="MWS-Version" value="${mws.version}"/>
                <section name="webMethods">
                    <attribute name="Specification-Title" value="webMethods Portal"/>
                    <attribute name="Specification-Vendor" value="webMethods"/>
                    <attribute name="Implementation-Title" value="webMethods Portal Component (${component.name})"/>
                    <attribute name="Implementation-Version" value="${mws.Implementation-Version}"/>
                    <attribute name="Implementation-Vendor" value="webMethods, Inc."/>
                    <attribute name="BuildTimestamp" value="${component.build.timestamp}" />
                    <attribute name="BuildVersion" value="${build.version}" />
                    <attribute name="webM-buildNumber" value="${build_number}"/>
                    <attribute name="webM-buildDate" value="${TODAY_jars}"/>
                </section>
            </manifest>
        </jar>

        <delete dir="${osgi.manifest.temp.dir}"/>

        <!-- copy the acdl file to the output dir -->
        <copy file="${component.home}/${component.name}.acdl" todir="${build.output.dir}/MWS"/>
    </target>

    <target name="make-pdp">
        <echo>Building PORTLET: ${component.name}...</echo>

        <available file="${component.home}/src" property="src.present"/>
        <property name="build.classes.dir" value="${component.home}/classes"/>
        <property name="shared.classes.dir" value="${shared.components}"/>
        <property name="uri.root" value="${component.home}/ui"/>
        <property name="jsp.package" value="ui.portlets.${component.name}"/>

        <!-- need to precompile ui files -->
        <condition property="precompile.ui">
            <and>
                <istrue value="${build.pages}"/>   <!-- global -->
                <available file="${component.home}/ui" type="dir"/>
            </and>
        </condition>

        <antcall target="generateDescriptorResourceBundle" inheritall="true" inheritrefs="true"/>

        <path id="component.class.path">
            <path refid="commonlib.class.path"/>
            <fileset dir="${component.home}" includes="WEB-INF/lib/*.jar"/>
        </path>

        <!--<parallel>-->
            <!-- compile core classes -->
            <antcall target="compile" inheritall="true" inheritrefs="true"/>
            <!-- parse jsp pages and generate java files -->
            <antcall target="jspc-internal" inheritall="true" inheritrefs="true"/>

        <!--</parallel>-->

        <available file="${component.home}/WEB-INF/classes" property="do.compile.jsp"/>

        <!-- compile jsp pages -->
        <antcall target="compileJsp" inheritall="true" inheritrefs="true"/>

        <echo>Generating component ACDL...</echo>
        <generateAcdl buildTimestamp="${acdl.build.timestamp}" runtimeVersion="${mws.Implementation-Version}" />

        <!-- generate the manifest for osgi -->
        <tempfile property="osgi.manifest.temp.dir" destDir="${java.io.tmpdir}" prefix="${component.file}" deleteonexit="true" />
        <generateOsgiManifest componentWebContent="${component.home}" 
             outputDir="${osgi.manifest.temp.dir}"
             projectType="pdp"/>        

        <jar jarfile="${build.output.dir}/MWS/${component.file}" basedir="${component.home}" compress="true" excludes="classes/**"
                manifest="${osgi.manifest.temp.dir}/META-INF/MANIFEST.MF">
            <exclude name="${component.file}"/>
            <exclude name="build.properties"/>
            <exclude name="src/**" unless="include.src"/>
            <exclude name=".project"/>
            <exclude name=".classpath"/>
            <exclude name=".settings/**"/>
			<exclude name="lib-compile/**"/>
            <fileset dir="${osgi.manifest.temp.dir}" excludes="META-INF/MANIFEST.MF" />

            <manifest>
            	<attribute name="MWS-Version" value="${mws.version}"/>
                <section name="webMethods">
                    <attribute name="Specification-Title" value="webMethods Portal"/>
                    <attribute name="Specification-Vendor" value="webMethods"/>
                    <attribute name="Implementation-Title" value="webMethods Portal Portlet (${component.name})"/>
                    <attribute name="Implementation-Version" value="${mws.Implementation-Version}"/>
                    <attribute name="Implementation-Vendor" value="webMethods, Inc."/>
                    <attribute name="webM-buildNumber" value="${build_number}"/>
                    <attribute name="webM-buildDate" value="${TODAY_jars}"/>
                    <attribute name="BuildTimestamp" value="${component.build.timestamp}" />
                    <attribute name="BuildVersion" value="${build.version}" />
                </section>
            </manifest>
        </jar>

        <delete dir="${osgi.manifest.temp.dir}"/>

        <!-- copy the acdl file to the output dir -->
        <copy file="${component.home}/${component.name}.acdl" todir="${build.output.dir}/MWS"/>
    </target>

    <target name="make-skin">
        <echo>Building SKIN: ${component.name}...</echo>

        <available file="${component.home}/src" property="src.present"/>
        <property name="build.classes.dir" value="${component.home}/classes"/>
        <property name="shared.classes.dir" value="${shared.components}"/> <!-- the same, not used -->
        <property name="uri.root" value="${component.home}"/>
        <property name="jsp.package" value="ui.skins.${component.name}"/>

        <!-- need to precompile ui files -->
        <condition property="precompile.ui">
            <and>
                <istrue value="${build.pages}"/>
                <available file="${component.home}/components" type="dir"/>
            </and>
        </condition>

        <path id="component.class.path">
            <path refid="commonlib.class.path"/>
        </path>
        <antcall target="compile" inheritall="true" inheritrefs="true"/>
        <antcall target="jspc-internal" inheritall="true" inheritrefs="true"/>
        <available file="${component.home}/WEB-INF/classes" property="do.compile.jsp"/>
        <antcall target="compileJsp" inheritall="true" inheritrefs="true"/>

		<echo>Updating component ACDL ...</echo>
		<generateAcdl buildTimestamp="${acdl.build.timestamp}" runtimeVersion="${mws.Implementation-Version}"/>

        <jar jarfile="${build.output.dir}/MWS/${component.file}" basedir="${component.home}" compress="true" excludes="classes/**">
            <exclude name="${component.file}"/>
            <exclude name="src/**" unless="component.include.src"/>
            <exclude name=".project"/>
            <exclude name=".classpath"/>
            <exclude name=".settings/**"/>
            <manifest>
            	<attribute name="MWS-Version" value="${mws.version}"/>
                <section name="webMethods">
                    <attribute name="Specification-Title" value="webMethods Portal"/>
                    <attribute name="Specification-Vendor" value="webMethods"/>
                    <attribute name="Implementation-Title" value="webMethods Portal Skin  (${component.name})"/>
                    <attribute name="Implementation-Version" value="${mws.Implementation-Version}"/>
                    <attribute name="Implementation-Vendor" value="webMethods, Inc."/>
                    <attribute name="webM-buildNumber" value="${build_number}"/>
                    <attribute name="webM-buildDate" value="${TODAY_jars}"/>
                    <attribute name="BuildTimestamp" value="${component.build.timestamp}" />
                </section>
            </manifest>
        </jar>

        <!-- copy the acdl file to the output dir -->
        <copy file="${component.home}/${component.name}.acdl" todir="${build.output.dir}/MWS"/>
    </target>

    <target name="make-war">
        <echo>Building WAR: ${component.name}...</echo>

        <!-- determine src directory -->
        <condition property="component.src" value="${component.home}/JavaSource">
            <available file="${component.home}/JavaSource" />
        </condition>
        <condition property="component.src" value="${component.home}/src">
            <available file="${component.home}/src" />
        </condition>
        <condition property="src.present">
            <isset property="component.src" />
        </condition>

        <!-- determine webcontent directory -->
        <condition property="component.web" value="${component.home}/WebContent" else="${component.home}">
            <available file="${component.home}/WebContent" />
        </condition>

        <property name="build.classes.dir" value="${component.web}/WEB-INF/classes"/>
        <property name="shared.classes.dir" value="${shared.components}"/> <!-- the same, not used -->
        <property name="uri.root" value="${component.web}"/>

        <!-- need to precompile ui files -->
        <condition property="precompile.ui">
            <istrue value="${build.pages}"/>
        </condition>

		<!-- MWS-25684 create temp direrctory in parent dir of project for storing jars required by subsequent asset builds -->
		<mkdir dir="${source.dir}/depLibs"/>
		
        <!--
        compile with component.src and component.web dirs
        and because the needed component <path> element is not scoped (affects all targets in file)
        -->
        <if>
            <isset property="component.src" />
            <then>
                <mkdir dir="${build.classes.dir}"/>
				<path id="depLibDir">
            		<fileset dir="${source.dir}/depLibs">
            			<include name="*.jar"/>
            		</fileset>
            	</path>
                <javac
                    includeAntRuntime="false"
                    encoding="${mws.build.encoding}"
                    fork="${build.fork}"
                    failonerror="${build.failonerror}"
                    srcdir="${component.src}"
                    destdir="${build.classes.dir}"
                    debug="${build.debug}"
                    deprecation="${build.deprecation}"
                    optimize="${build.optimize}"
                    nowarn="${build.nowarn}"
                    listfiles="${build.listfiles}">
                    <classpath>
						<path refid="depLibDir"/> <!-- MWS-25684 refer to temp directory containing jars of previously built assets -->
                        <path refid="commonlib.class.path"/>
                        <dirset id="shared.components.dir" dir="${shared.components.home}" includes="${shared.classes.dir}" erroronmissingdir="false"/>
                        <fileset dir="${component.web}" includes="WEB-INF/lib/*.jar"/>
                        <pathelement location="${shared.classes.dir}"/>
						<fileset dir="${component.home}/lib-compile" includes="**/*.jar" erroronmissingdir="false"/>
                    </classpath>
                </javac>
            </then>
        </if>

        <!--antcall target="jspc-jasper" inheritall="true" inheritrefs="true"/-->

        <!--<antcall target="updateWebXml" inheritall="true" inheritrefs="true"/>-->

        <!-- DON'T COMPILE JSP's into classes
        '<available file="${component.web}/WEB-INF/classes" property="do.compile.jsp"/>
        <antcall target="compileJsp" inheritall="true" inheritrefs="true"/>
         -->

        <!-- copy any resources from the src folder to the classes folder -->
        <if>
            <isset property="component.src" />
            <then>
                <copy todir="${build.classes.dir}">
                    <fileset dir="${component.src}">
                        <exclude name="**/*.java"/>
                    </fileset>
                </copy>
            </then>
        </if>

        <!-- MWS-12884 - put the compiled classes into a jar file -->
	<mkdir dir="${component.web}/WEB-INF/lib"/>
	<jar jarfile="${component.web}/WEB-INF/lib/${component.name}.jar" basedir="${build.classes.dir}" compress="true">
		<manifest>
			<section name="webMethods">
				<attribute name="Specification-Title" value="webMethods Portal"/>
				<attribute name="Specification-Vendor" value="webMethods"/>
				<attribute name="Implementation-Title" value="webMethods Portal Component (${component.name})"/>
				<attribute name="Implementation-Version" value="${component.full.version}"/>
				<attribute name="Implementation-Vendor" value="webMethods, Inc."/>
				<attribute name="Build-Timestamp" value="${build.timestamp}" />
				<attribute name="webM-buildNumber" value="${build.number}"/>
				<attribute name="webM-buildDate" value="${TODAY_jars}"/>
			</section>
		</manifest>
	</jar>
        <!-- classes provided in a jar file, so we can remove the duplicates from the classes folder -->
        <delete dir="${component.web}/WEB-INF/classes" failonerror="false"/>

        <!-- generate the manifest for osgi -->
        <tempfile property="osgi.manifest.temp.dir" destDir="${java.io.tmpdir}" prefix="${component.file}" deleteonexit="true"/>
        <generateOsgiManifest componentWebContent="${component.web}" 
                    outputDir="${osgi.manifest.temp.dir}"
                    projectType="war"/>

	<echo>Generating component ACDL...</echo>
	<generateAcdl buildTimestamp="${acdl.build.timestamp}" runtimeVersion="${mws.Implementation-Version}" />

        <jar destfile="${build.output.dir}/${build.type}/${component.file}" basedir="${component.web}"
                manifest="${osgi.manifest.temp.dir}/META-INF/MANIFEST.MF">
            <exclude name="${component.file}"/>
            <exclude name="${component.src}/**" unless="include.src"/>
            <exclude name="*.iml" unless="include.src"/> <!-- idea module -->
            <exclude name="WEB-INF/src/**" unless="include.src"/>
            <exclude name="WEB-INF/web.xml.template"/>
            <exclude name="build.properties"/>
            <exclude name=".project"/>
            <exclude name=".classpath"/>
            <exclude name=".settings/**"/>
            <fileset dir="${osgi.manifest.temp.dir}" excludes="META-INF/MANIFEST.MF" />
            <manifest>
                <attribute name="MWS-Version" value="${mws.version}"/>
            </manifest>
            <!--<manifest>
                <section name="webMethods">
                    <attribute name="Specification-Title" value="webMethods Portal"/>
                    <attribute name="Specification-Vendor" value="webMethods"/>
                    <attribute name="Implementation-Title" value="webMethods Portal Web/Portal Application (${component.name})"/>
                    <attribute name="Implementation-Version" value="${mws.Implementation-Version}"/>
                    <attribute name="Implementation-Vendor" value="webMethods, Inc."/>
                    <attribute name="webM-buildNumber" value="${build_number}"/>
                    <attribute name="webM-buildDate" value="${TODAY_jars}"/>
                    <attribute name="BuildTimestamp" value="${component.build.timestamp}" />
                    <attribute name="BuildVersion" value="${build.version}" />
                </section>
            </manifest>-->
        </jar>
		<!-- MWS-25684 copy jar to temp directory before deleteion -->
    	<copy file="${component.web}/WEB-INF/lib/${component.name}.jar" todir="${source.dir}/depLibs"/>
		
        <!-- MWS-12884 - cleanup the temporary jar file that contained the compiled classes -->
        <delete file="${component.web}/WEB-INF/lib/${component.name}.jar" failonerror="false"/>

        <delete dir="${osgi.manifest.temp.dir}"/>

        <!-- check for FLEX project folders -->
        <if>
            <available file="${component.home}/flex_src" />
        <then>
            <jar destfile="${build.output.dir}/${build.type}/${component.file}" update="true">
            <fileset dir="${component.home}/flex_src" />
            </jar>
        </then>
        </if>

        <!-- copy the acdl file to the output dir -->
        <copy file="${component.home}/${component.name}.acdl" todir="${build.output.dir}/${build.type}"/>
    </target>

    <target name="make-category">
        <echo>Building ALL COMPONENTS IN: ${component.home}...</echo>
        <foreachComponent target="make" targetpertype="true" root="${component.home}" componentsHome="${component.home}" enforceStrictFolderStructure="true"/>
    </target>

    <target name="make-jar" >
        <echo>Building JAR: ${component.name}...</echo>

        <available file="${component.home}/src" property="src.present"/>
        <property name="build.classes.dir" value="${component.home}/classes"/>
        <property name="shared.classes.dir" value="${shared.components}"/> <!-- the same, not used -->
                
        <path id="component.class.path">
            <path refid="commonlib.class.path"/>
            <fileset dir="${component.home}" includes="lib/*.jar"/>
            <fileset dir="${component.home}" includes="${build.output.dir}/MWS/*.jar"/>
        </path>

        <echo>Generating component ACDL...</echo>
        <generateAcdl buildTimestamp="${acdl.build.timestamp}" runtimeVersion="${mws.Implementation-Version}"/>
        
        <antcall target="compile" inheritall="true" inheritrefs="true"/>
        <!-- unpack lib/*.jars to include along with classes -->
        <unjar dest="${build.classes.dir}" overwrite="true">
            <fileset dir="${component.home}">
                <include name="lib/*.jar"/>
            </fileset>
        </unjar>

        <!-- generate the manifest for osgi -->
        <tempfile property="osgi.manifest.temp.dir" destDir="${java.io.tmpdir}" prefix="${component.file}" deleteonexit="true"/>
        <generateOsgiManifest componentWebContent="${build.classes.dir}" 
                        outputDir="${osgi.manifest.temp.dir}"
                        projectType="jar"/>

        <jar jarfile="${build.output.dir}/MWS/${component.file}" basedir="${build.classes.dir}" compress="true" excludes="classes/**"
            manifest="${osgi.manifest.temp.dir}/META-INF/MANIFEST.MF">
            <fileset dir="${component.home}" includes="jar.component.xml"/>
            <fileset dir="${osgi.manifest.temp.dir}" excludes="META-INF/MANIFEST.MF" />
            <manifest>
                <attribute name="MWS-Version" value="${mws.version}"/>
            </manifest>
            <!--<manifest>
                     <section name="webMethods">
                            <attribute name="Specification-Title" value="webMethods Portal"/>
                            <attribute name="Specification-Vendor" value="webMethods"/>
                            <attribute name="Implementation-Title" value="webMethods Portal  Library (${component.name})"/>
                            <attribute name="Implementation-Version" value="${component.full.version}"/>
                            <attribute name="Implementation-Vendor" value="webMethods, Inc."/>
                            <attribute name="webM-buildNumber" value="${build.number}"/>
                            <attribute name="webM-buildDate" value="${TODAY_jars}"/>
                            <attribute name="Build-Timestamp" value="${build.timestamp}" />
                        </section>
                    </manifest>-->
        </jar>
        <delete dir="${osgi.manifest.temp.dir}"/>
        <copy file="${component.home}/${component.name}.acdl" todir="${build.output.dir}/MWS"/>
    </target>


    <target name="make-dccb">
		<echo message="Ignoring DCCB Project @ ${component.home}" />
    </target>

</project>
