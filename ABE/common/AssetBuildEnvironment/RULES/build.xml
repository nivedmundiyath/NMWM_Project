<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================
	30.11.2010 16:16:56

	webMethods business rules ant support

	This build file supports creating rule project archives.
	Therefore the rule project must exist in the local file system.

	Ralf Grube
	====================================================================== -->
<project name="webMethods business rules ant support" default="build" basedir=".">
	<description>
		This build file supports creating rule project archives.
		Therefore the rule projects must reside in the local file system.
    </description>

	<!-- =================================
		properties
		================================= -->
	<property name="rules.ant.lib.dir" value="${basedir}/lib" />
	<property name="rule.project.classes" value="classes" />
	
	<target name="setup.output.properties">
		<property name="rules.build.output.dir" value="${build.output.dir}/RULES" />
	</target>
	
	<target name="clean" unless="${RULES.skip.clean}">
		<delete dir="${rules.build.output.dir}">
		</delete>
	</target>

	<target name="init" depends="clean">
		<mkdir dir="${rules.build.output.dir}" />
	</target>
	
<!--   ================================= 
	  	paths            
	 	================================= -->
	<path id="classpath">
		<fileset dir="${sag.install.dir}">
			<include name="*.jar" />
			<include name="common/lib/**/*.jar" />
		</fileset>
		<fileset dir="${rules.ant.lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>
	
	<path id="compile.classpath">
		<fileset dir="${rules.ant.lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- =================================
		custom task definitions
		================================= -->
	<taskdef resource="rulesAnt.properties">
		<classpath refid="classpath" />
	</taskdef>

	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${classpath}">
		<classpath refid="classpath" />
	</taskdef>
	
	<target name="build"
	        depends="setup.output.properties, init"
	        description="Iterates over all rule projects in the given 
		root folder and creates rule project archives and ACDL files for each.">
		
		<!-- check multi project folders  -->
		<if>
			<isset property="RULES.build.source.dir" />
			<then>
				<!-- look into RULES.build.source.dir folders -->
				<antcallback target="iterate_multi_project_folders" return="min.one.project.failed">
					<param name="multi.projects.folder.list" value="${RULES.build.source.dir}" />
				</antcallback>
			</then>
			<else>
				<!-- look into build.source.dir folders -->
				<antcallback target="iterate_multi_project_folders" return="min.one.project.failed">
					<param name="multi.projects.folder.list" value="${build.source.dir}" />
				</antcallback>
			</else>
		</if>

		<!-- check single project folders  -->
		<if>
			<isset property="RULES.build.source.project.dir" />
			<then>
				<!-- look into RULES.build.source.project.dir folders -->
				<antcallback target="iterate_single_project_folders" return="min.one.project.failed">
					<param name="single.projects.folder.list" value="${RULES.build.source.project.dir}" />
				</antcallback>
			</then>
			<else>
				<!-- look into build.source.project.dir folders -->
				<antcallback target="iterate_single_project_folders" return="min.one.project.failed">
					<param name="single.projects.folder.list" value="${build.source.project.dir}" />
				</antcallback>
			</else>
		</if>

		<fail message="At least one rule project has an error. Please, check log files.">
			<condition>
				<and>
					<istrue value="${min.one.project.failed}"/>
					<istrue value="${build.exit.error}"/>
				</and>
			</condition>
		</fail>

	</target>

	<target name="iterate_multi_project_folders">
		<for list="${multi.projects.folder.list}" param="multi.projects.dir" delimiter=";">
			<sequential>
				<for param="current.rule.project.folder">
					<path>
						<dirset dir="@{multi.projects.dir}" includes="*" />
					</path>
					<sequential>
						<antcallback target="build_single_rule_project" return="min.one.project.failed">
							<param name="current.rule.project.folder" value="@{current.rule.project.folder}" />
						</antcallback>
					</sequential>
				</for>
			</sequential>
		</for>
	</target>

	<target name="iterate_single_project_folders">
		<for list="${single.projects.folder.list}"
			param="current.rule.project.folder"
			delimiter=";">
			<sequential>
				<antcallback target="build_single_rule_project" return="min.one.project.failed">
					<param name="current.rule.project.folder" value="@{current.rule.project.folder}" />
				</antcallback>
			</sequential>
		</for>
	</target>

	<target name="build_single_rule_project" description="Cumulates all tasks to build a single RuleProject">

		<echo>Start building project ${current.rule.project.folder} 
		</echo>

		<tstamp>
			<format property="build.timestamp" pattern="yyyy-MM-dd'T'HH:mm:ss" />
		</tstamp>

		<antcallback target="create_archive_and_acdl_file" return="min.one.project.failed">
		</antcallback>

		<echo>Project build finished
		</echo>

	</target>

	<target name="create_archive_and_acdl_file"
	        unless="skip.current.rule.project"
	        description="Creates the RuleProject archive and the corresponding SCDL file which are deployed later on.">
		<property name="classpathProperty" refid="compile.classpath" />
		<RulesArchiveAndAcldFileBuilder
					ruleProjectBaseDir="${current.rule.project.folder}"
					outputDir="${rules.build.output.dir}"
					projectVersion="${build.version}"
					classPath="${classpathProperty}"
					skipOnWarning="${RULES.skip.on.validation.warning}"
					buildVersion="${build.version}"
					buildTimestamp="${build.timestamp}"/>
		
		<!-- set property min.one.project.failed if the creation has an error -->
		<if>
			<isset property="build.failed" />
			<then>
				<property name="min.one.project.failed" value="true"/>
			</then>
		</if>
	</target>
</project>
